@using bikeRental.Application;
@using bikeRental.Application.Models.Station;
@model PaginatedList<bikeRental.Application.Models.Station.StationResponse>

@{
    ViewData["Title"] = "Stations";
}



<div class="container px-4 pt-2">
<h2>Stations</h2>
<div class="container">
    <div class="row justify-content-between">
        <div class="col-6">
        <form asp-controller="Stations" asp-action="Index" asp-route-searchString="@ViewData["searchString"]" method="get">
            <div class="input-group">
                     <input type="text" placeholder="Start typing address…" name="searchString" value="@ViewData["searchString"]" class="form-control"/>
                     <div class="input-group-append">
                         <button type="submit" class="btn btn-warning">Search <i class="bi bi-bicycle"></i></button>
                         <a class="btn btn-light" asp-action="Index">Back to Full List</a>
                     </div>
            </div>
        </form>
        </div>
        <div class="col-4">
        @if (User.Identity!.IsAuthenticated && User.IsInRole("Administrator"))
        {
            <div>

                <a class="btn btn-outline-success" asp-controller="Stations" asp-action="Create"><i class="bi bi-house-add"> Create new station</i></a>
            </div>
        }
        </div>
    </div>
</div>

<table class="table table-hover mt-5 ">
    <tr>
            @foreach (var prop in typeof(StationResponse).GetProperties())
            {
                @if(prop.Name == "Bicycles")
                {
                    <th>
				        @prop.Name
			        </th>
                }
				else if (prop.Name != "Id" && prop.Name != "Bicycles")
                    {
                        <th>
                            @prop.Name
                            <a style="color:black" asp-action="Index" asp-route-sortOrder=@($"{prop.Name}Desc")><i class="bi bi-caret-up-fill"></i></a>
                            <a style="color:black" asp-action="Index" asp-route-sortOrder=@($"{prop.Name}")><i class="bi bi-caret-down-fill"></i></a>
						</th>
                    }
            }
			
			@if (User.Identity!.IsAuthenticated && User.IsInRole("Administrator"))
            {   
                  <th>
                     Edit/Delete
                  </th>       
            }
           
    </tr>
       @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Address)
                </td>
                <td>
                    <a class="btn btn-outline-secondary" asp-controller="Bicycles" asp-action="GetByStation" asp-route-Id="@item.Id">
                        <i class="bi bi-bicycle"></i>
                    </a>

                </td>
                @if (User.Identity!.IsAuthenticated && User.IsInRole("Administrator"))
                {
                    <td>
                        <a class="btn btn-outline-primary" asp-controller="Stations" asp-action="Edit" asp-route-id="@item.Id"><i class="bi bi-pen"></i></a>
                        <a class="btn btn-outline-danger" asp-controller="Stations" asp-action="Delete" asp-route-id="@item.Id"><i class="bi bi-trash"></i></a>
                    </td>
                }
            </tr>
        }  
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
    asp-controller="Stations"
   asp-route-searchString="@ViewData[""]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-sortOrder="@ViewData["sortOrder"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
    asp-controller="Stations"
   asp-route-searchString="@ViewData["searchString"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-sortOrder="@ViewData["sortOrder"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
</div>
